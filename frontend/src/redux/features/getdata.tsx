import { createSlice, PayloadAction, createAsyncThunk, ThunkAction } from "@reduxjs/toolkit";
/*import { AppThunk, RootState } from "../stores/store";
import axios from "axios";

interface IGetData {
  loading: boolean;
  data: [];
  error: string;
}

const initialState: IGetData = {
  loading: false,
  data: [],
  error: "",
};
// AsynThunk generate pending, fulfilled and rejected action types. and these actions can be listend to using a reducer function and perform the necessary actions
// these reducers and not generated by the slice and have to be added through extraReducers.
const fetchData = createAsyncThunk("userData/fetchData", async () => {
  const response = await axios
        .get("http://placeholderapi.com/placeholders");
    return console.log(response.data);
 
});

export const dataSlice = createSlice({
  name: "userData",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchData.pending, (state) => {
      state.loading = true;
    });
  },
}); 


export const {fetchData} = dataSlice.actions;

export const userData = ( state:RootState)=> state.userData;
export default dataSlice.reducer;

*/